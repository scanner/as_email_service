volumes:
  redis_data:
    name: "as_email_redis_data_01"

services:
  web: &web
    image: "as_email_service_app:latest"
    container_name: app
    build:
      context: .
      dockerfile: ./Dockerfile
      target: prod
      platforms:
        - "linux/amd64"
        - "linux/arm64"
        # - "linux/arm/v7"   # when we want to build for raspberry pi's
    ports:
      - "11578:8000"
    command: /app/scripts/start_app.sh
    restart: unless-stopped
    env_file: .env
    volumes:
      - "${HOST_DB_DIR}:/mnt/db:z"
      - "${HOST_SPOOL_ROOT}:/mnt/spool:z"
      - "${HOST_MAIL_ROOT}:/mnt/mail_dirs:z"
    profiles:
      - prod

  smtpd:
    image: as_email_service_app
    container_name: smtpd
    ports:
      - "25:25"
      - "587:587"
    command: /app/scripts/start_smtpd.sh
    restart: unless-stopped
    env_file: .env
    volumes:
      - "${HOST_DB_DIR}:/mnt/db:z"
      - "${HOST_SPOOL_ROOT}:/mnt/spool:z"
      - "${HOST_SSL_DIR}:/mnt/ssl:ro"
    profiles:
      - prod

  worker:
    image: as_email_service_app
    container_name: worker
    command: /app/scripts/start_worker.sh
    restart: unless-stopped
    env_file: .env
    volumes:
      - "${HOST_DB_DIR}:/mnt/db:z"
      - "${HOST_SPOOL_ROOT}:/mnt/spool:z"
      - "${HOST_MAIL_ROOT}:/mnt/mail_dirs:z"
    profiles:
      - dev
      - prod

  devweb:
    <<: *web
    image: as_email_service_app_dev:latest
    container_name: dev_app
    build:
      context: .
      dockerfile: ./Dockerfile
      target: dev
    depends_on:
      - mailhog
      - redis
    ports:
      - "11578:8000"
    command: wait-for-it --service redis:6379 -- /app/manage.py runserver_plus --cert-file /mnt/ssl/ssl_crt.pem --key-file /mnt/ssl/ssl_key.pem 0.0.0.0:8000
    restart: unless-stopped
    env_file: .env
    volumes:
      - ./app:/app:z
      - "${HOST_DB_DIR}:/mnt/db:z"
      - "${HOST_SPOOL_ROOT}:/mnt/spool:z"
      - "${HOST_MAIL_ROOT}:/mnt/mail_dirs:z"
      - "${HOST_SSL_DIR}:/mnt/ssl:ro"
      - type: bind
        source: ./pyproject.toml
        target: /app/pyproject.toml
        read_only: true
    profiles:
      - dev

  devsmtpd:
    <<: *web
    image: as_email_service_app_dev:latest
    container_name: dev_smtpd
    build:
      context: .
      dockerfile: ./Dockerfile
      target: dev
    ports:
      - "25:25"
      - "587:587"
    command: /app/scripts/start_smtpd.sh
    restart: unless-stopped
    env_file: .env
    volumes:
      - ./app:/app:z
      - "${HOST_DB_DIR}:/mnt/db:z"
      - "${HOST_SPOOL_ROOT}:/mnt/spool:z"
      - "${HOST_SSL_DIR}:/mnt/ssl:ro"
    profiles:
      - dev

  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    volumes:
      - "redis_data:/data"
      - type: bind
        source: ${PWD}/config/redis/redis.conf
        target: /usr/local/etc/redis/redis.conf
    expose:
      - 6379
    profiles:
      - dev
      - prod

  mailhog:
    image: druidfi/mailhog:1.0.1
    container_name: mailhog
    restart: unless-stopped
    ports:
      - "8025:8025"
    profiles:
      - dev

  spamassassin:
    image: instantlinux/spamassassin:4.0.1-1
    container_name: spamassassin
    restart: unless-stopped
    ports:
      - "783:783"
    volumes:
      - ./spama/local.cf:/etc/mail/spamassassin/local.cf:ro
      - ./spama/local.pre:/etc/mail/spamassassin/local.pre:ro
      - ./spama/home:/var/lib/spamassassin
      - ./spama/logs:/var/log
      - ./spama/training:/mnt/training
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: 10
    env_file: .env
    expose:
      - 783
    profiles:
      - dev
      - prod
