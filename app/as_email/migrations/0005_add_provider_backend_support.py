# Generated by Django 5.2.7 on 2025-10-23 02:48

import django.db.models.deletion
from django.db import migrations, models


####################################################################
#
def migrate_provider_data(apps, schema_editor):
    """
    Migrate existing provider relationships to the new structure.

    For each Server:
    - Copy the old 'provider' to 'send_provider'
    - Add the old 'provider' to 'receive_providers'
    """
    Server = apps.get_model("as_email", "Server")

    for server in Server.objects.all():
        if server.provider_id:
            # Set send_provider to the old provider
            server.send_provider_id = server.provider_id
            server.save()

            # Add the old provider to receive_providers
            server.receive_providers.add(server.provider_id)


####################################################################
#
def reverse_migrate_provider_data(apps, schema_editor):
    """
    Reverse migration: copy send_provider back to provider.

    Note: This only restores send_provider, not receive_providers,
    as the old schema only supported a single provider.
    """
    Server = apps.get_model("as_email", "Server")

    for server in Server.objects.all():
        if server.send_provider_id:
            server.provider_id = server.send_provider_id
            server.save()


class Migration(migrations.Migration):

    dependencies = [
        ("as_email", "0004_alter_messagefilterrule_header"),
    ]

    operations = [
        migrations.AddField(
            model_name="provider",
            name="backend_name",
            field=models.CharField(
                default="postmark",
                help_text="The name of the provider backend to use (e.g., 'postmark', 'forwardemail'). This determines which implementation handles email sending and webhook processing.",
                max_length=50,
            ),
        ),
        migrations.AddField(
            model_name="provider",
            name="provider_type",
            field=models.CharField(
                choices=[
                    ("SEND", "Send Only"),
                    ("RECEIVE", "Receive Only"),
                    ("BOTH", "Send and Receive"),
                ],
                default="BOTH",
                help_text="Whether this provider is used for sending email, receiving email, or both.",
                max_length=10,
            ),
        ),
        migrations.AddField(
            model_name="server",
            name="receive_providers",
            field=models.ManyToManyField(
                blank=True,
                help_text="The providers that can deliver incoming email to this domain. Multiple providers can be configured to receive email from different sources.",
                related_name="receiving_servers",
                to="as_email.provider",
            ),
        ),
        migrations.AddField(
            model_name="server",
            name="send_provider",
            field=models.ForeignKey(
                blank=True,
                help_text="The provider used for sending outgoing email from this domain. If not set, this server can only receive email.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="sending_servers",
                to="as_email.provider",
            ),
        ),
        migrations.AlterField(
            model_name="provider",
            name="smtp_server",
            field=models.CharField(
                blank=True,
                help_text="The host:port for sending messages via SMTP for this provider (each server has its own unique login, but all the servers on the same provider use the same hostname for SMTP). Only required for providers that support sending email.",
                max_length=200,
            ),
        ),
        migrations.AlterField(
            model_name="server",
            name="domain_name",
            field=models.CharField(
                help_text="The domain name this server handles email for (e.g., 'example.com'). Email accounts on this server will have addresses ending with this domain.",
                max_length=200,
                unique=True,
            ),
        ),
        migrations.AlterField(
            model_name="server",
            name="provider",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="as_email.provider",
            ),
        ),
        migrations.RunPython(
            migrate_provider_data, reverse_migrate_provider_data, elidable=True
        ),
    ]
