# Generated by Django 4.2.6 on 2023-10-25 17:24

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Alias",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EmailAccount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "email_address",
                    models.EmailField(
                        help_text="The email address that will receive emails on this server, and the address that will be used as a login to send emails. It must have the same domin name as the associated server",
                        max_length=254,
                        unique=True,
                    ),
                ),
                (
                    "delivery_method",
                    models.CharField(
                        choices=[
                            ("LD", "Local Delivery"),
                            ("AL", "Alias"),
                            ("FW", "Forwarding"),
                        ],
                        default="LD",
                        help_text="Delivery method indicates how email for this account is delivered. This is either delivery to a local mailbox, delivery to an IMAP mailbox, an alias to another email account on this system or forwarding to an email address by encapsulating the message or rewriting the headers.",
                        max_length=2,
                    ),
                ),
                (
                    "mail_dir",
                    models.CharField(
                        blank=True,
                        help_text="The root folder for the local mail delivery for this email account. This should be left blank and it will be auto-filled in when the email account is created. Only fill it in if you have a specific location in the file system you want this user's local mailbox to be stored at.",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "password",
                    models.CharField(
                        default="XXX",
                        help_text="Password used for the SMTP and IMAP services for this email account",
                        max_length=200,
                    ),
                ),
                (
                    "autofile_spam",
                    models.BooleanField(
                        default=True,
                        help_text="When incoming mail exceeds the threshold set in `spam_score_threshold` then this email will automatically files in the `spam_delivery_folder` mailbox. NOTE: This only apply if local or IMAP delivery is selected in `delivery_method`.",
                    ),
                ),
                (
                    "spam_delivery_folder",
                    models.CharField(
                        default="Junk",
                        help_text="If `blocked_messages` is set to `Deliver` then this is the mail folder that they are delivered to.",
                        max_length=1024,
                    ),
                ),
                (
                    "spam_score_threshold",
                    models.IntegerField(
                        default=15,
                        help_text="If you select automatic spam filing for delivered email this isthe SpamAssassin X-Spam-Score value used. If the X-Spam-Score is over this value then the email will be delivered to the blocked message delivery folder (instead of the default `inbox`). Set this to 0 if you basically want no automatic spam filtering.",
                    ),
                ),
                (
                    "forward_to",
                    models.EmailField(
                        blank=True,
                        help_text="When the email account delivery method is set to `Forwarding` this is the email address that this email is forwarded to. NOTE: `forward_to` is only relevant when the delivery method is `Forwarding`. The field is otherwise ignored.",
                        max_length=254,
                        null=True,
                    ),
                ),
                (
                    "deactivated",
                    models.BooleanField(
                        default=False,
                        help_text="If an account is deactivated it can still receive email. However it is no longer allowed to send email. Aliasing to other email accounts is allowed, but no forwarding to an email account not on on the system is allowed.",
                    ),
                ),
                (
                    "num_bounces",
                    models.IntegerField(
                        default=0,
                        help_text="Every time this email account sends an email and it results in a bounce this counter will increment. The mail provider does not allow excessive bounced email and this is a check to make sure that does not happen. An asynchronous task will go through all accounts that have a non-zero number of bounces and reduce them by 1 once a day. If you have more than the limit your account will be deactivated until it goes under the limit.",
                    ),
                ),
                (
                    "deactivated_reason",
                    models.TextField(
                        blank=True,
                        help_text="Reason for the account being deactivated",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "alias_for",
                    models.ManyToManyField(
                        help_text="If the delivery method is `Alias` this is a list of the email accounts that the email will be delivered to instead of this email account. You are declaring that this account is an `alias for` these other accounts. So, say `root@example.com` is an alias for `admin@example.com`, or `thetwoofus@example.com` is an alis for `me@example.com` and `you@example.com`. NOTE: you can only alias to email accounts that are managed by this system. If you want to have email forwarded to a email address not managed by this system you need to choose the delivery method `Forwarding` and properly specify the destination address in the `forward_to` field. NOTE: `alias_for` is only relevant when the delivery method is `Alias`. The field is otherwise ignored.",
                        related_name="aliases",
                        related_query_name="alias",
                        through="as_email.Alias",
                        to="as_email.emailaccount",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ("server", "email_address"),
            },
        ),
        migrations.CreateModel(
            name="Provider",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, unique=True)),
                (
                    "smtp_server",
                    models.CharField(
                        help_text="The host:port for sending messages via SMTP for this provider (each server has its own unique login, but all the servers on the same provider using the same hostname for SMTP.)",
                        max_length=200,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Server",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "domain_name",
                    models.CharField(
                        help_text="This is the 'server' within postmark to handle email for the specified domain.",
                        max_length=200,
                        unique=True,
                    ),
                ),
                (
                    "api_key",
                    models.CharField(
                        blank=True,
                        help_text="In order for the mail provider to be able to post data to the web hooks on this service, they need an API key that is unique to this server. NOTE: This is for incoming posts FROM the mail server to this service. NOT for authenticating this service to the provider. If this is left blank it will have a sufficiently random string generated.",
                        max_length=40,
                        null=True,
                    ),
                ),
                (
                    "incoming_spool_dir",
                    models.CharField(
                        blank=True,
                        help_text="The directory incoming messages are temporarily spooled to before being delivered. If not set a reasonable default will be chosen (this is the recommended way).",
                        max_length=1024,
                        null=True,
                    ),
                ),
                (
                    "outgoing_spool_dir",
                    models.CharField(
                        blank=True,
                        help_text="The directory outgoing messages are temporarily spooled to before being sent to the server for delivery. If not set a reasonable default will be chosen (this is the recommended way).",
                        max_length=1024,
                        null=True,
                    ),
                ),
                (
                    "mail_dir_parent",
                    models.CharField(
                        blank=True,
                        help_text="The directory that is the root of all the local mailboxes that mail will be delivered to if being delivered locally. The mailboxes are named by the email address being delivered to.If not set a reasonable default will be chosen (this is the recommended way).",
                        max_length=1024,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "provider",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="as_email.provider",
                    ),
                ),
            ],
            options={
                "ordering": ("domain_name",),
            },
        ),
        migrations.CreateModel(
            name="MessageFilterRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        db_index=True, editable=False, verbose_name="order"
                    ),
                ),
                (
                    "header",
                    models.CharField(
                        choices=[
                            ("addr", "addr"),
                            ("*", "*"),
                            ("bcc", "bcc"),
                            ("cc", "cc"),
                            ("default", "default"),
                            ("from", "from"),
                            ("reply-to", "reply-to"),
                            ("source", "source"),
                            ("subject", "subject"),
                            ("to", "to"),
                        ],
                        default="default",
                        max_length=32,
                    ),
                ),
                ("pattern", models.CharField(blank=True, max_length=256)),
                (
                    "action",
                    models.CharField(
                        choices=[("folder", "folder"), ("destroy", "destroy")],
                        default="folder",
                        max_length=10,
                    ),
                ),
                ("destination", models.CharField(blank=True, max_length=1024)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "email_account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="message_filter_rules",
                        to="as_email.emailaccount",
                    ),
                ),
            ],
            options={
                "ordering": ("email_account", "order"),
            },
        ),
        migrations.CreateModel(
            name="InactiveEmail",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "email_address",
                    models.EmailField(
                        help_text="The inactive email address. Our mail provider has indicate that we are not allowed to send emails to this address anymore.",
                        max_length=254,
                        unique=True,
                    ),
                ),
                (
                    "can_activate",
                    models.BooleanField(
                        default=False,
                        help_text="If True this indicates that we are able to manually reactivate sending emails to this address. Before doing so we need to make sure that any problems sending to this address have been resolved.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ("email_address",),
                "indexes": [
                    models.Index(
                        fields=["email_address"],
                        name="as_email_in_email_a_e60072_idx",
                    ),
                    models.Index(
                        fields=["can_activate"],
                        name="as_email_in_can_act_803305_idx",
                    ),
                    models.Index(
                        fields=["email_address", "can_activate"],
                        name="as_email_in_email_a_6918c2_idx",
                    ),
                ],
            },
        ),
        migrations.AddField(
            model_name="emailaccount",
            name="server",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="as_email.server",
            ),
        ),
        migrations.AddField(
            model_name="alias",
            name="from_email_account",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="as_email.emailaccount",
            ),
        ),
        migrations.AddField(
            model_name="alias",
            name="to_email_account",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="as_email.emailaccount",
            ),
        ),
        migrations.AddIndex(
            model_name="server",
            index=models.Index(
                fields=["domain_name"], name="as_email_se_domain__7128d9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="messagefilterrule",
            index=models.Index(
                fields=["email_account"], name="as_email_me_email_a_202230_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="messagefilterrule",
            index=models.Index(
                fields=["email_account", "order"],
                name="as_email_me_email_a_8a8dcb_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="messagefilterrule",
            unique_together={("email_account", "header", "pattern")},
        ),
        migrations.AddIndex(
            model_name="emailaccount",
            index=models.Index(
                fields=["forward_to"], name="as_email_em_forward_136d4b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="emailaccount",
            index=models.Index(
                fields=["email_address"], name="as_email_em_email_a_7ad406_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="emailaccount",
            index=models.Index(
                fields=["server"], name="as_email_em_server__cd7056_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="emailaccount",
            index=models.Index(
                fields=["owner"], name="as_email_em_owner_i_3e0f16_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="alias",
            constraint=models.UniqueConstraint(
                fields=("from_email_account", "to_email_account"),
                name="as_email_alias_unique_relationships",
            ),
        ),
        migrations.AddConstraint(
            model_name="alias",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("from_email_account", models.F("to_email_account")),
                    _negated=True,
                ),
                name="as_email_alias_prevent_self_alias",
            ),
        ),
    ]
