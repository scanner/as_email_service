# Generated by Django 4.2.4 on 2023-08-21 00:42

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Alias",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EmailAccount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "email_address",
                    models.EmailField(
                        help_text="The email address that will receive emails on this server, and the address that will be used as a login to send emails. It must have the same domin name as the associated server",
                        max_length=254,
                        unique=True,
                    ),
                ),
                (
                    "account_type",
                    models.CharField(
                        choices=[
                            ("LD", "Local Delivery"),
                            ("AL", "Alias"),
                            ("FW", "Forwarding"),
                        ],
                        default="LD",
                        max_length=2,
                    ),
                ),
                (
                    "mail_dir",
                    models.CharField(
                        blank=True,
                        help_text="The root folder of the mail directory for this email account. This should be left blank and it will be auto-filled in when the email account is created. Only fill it in if you have a specific location in the file system you want this user's mailbox to be stored at.",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "password",
                    models.CharField(
                        default="XXX",
                        help_text="Password used for the SMTP and IMAP services for this email account",
                        max_length=200,
                    ),
                ),
                (
                    "handle_blocked_messages",
                    models.CharField(
                        choices=[("BL", "Block"), ("DE", "Deliver")],
                        default="DE",
                        help_text="When the email provider blocks a message because it is thought to be spam you can choose to have the email delivered to the folder set in the `blocked messages delivery folder` or you canchoose them to be blocked. ie: not delivered to your mail box at all. They will be viewable in the email account's blocked messages list where you can choose to have them delivered to your mail box on a message by message basis.",
                        max_length=2,
                    ),
                ),
                (
                    "blocked_messages_delivery_folder",
                    models.CharField(
                        default="Junk",
                        help_text="If `blocked_messages` is set to `Deliver` then this is the mail folder that they are delivered to.",
                        max_length=1024,
                    ),
                ),
                (
                    "forward_to",
                    models.EmailField(blank=True, max_length=254, null=True),
                ),
                ("deactivated", models.BooleanField(default=False)),
                ("num_bounces", models.IntegerField(default=0)),
                (
                    "deactivated_reason",
                    models.TextField(
                        blank=True,
                        help_text="Reason for the account being deactivated",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "alias_for",
                    models.ManyToManyField(
                        related_name="aliases",
                        related_query_name="alias",
                        through="as_email.Alias",
                        to="as_email.emailaccount",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ("server", "email_address"),
            },
        ),
        migrations.CreateModel(
            name="Provider",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, unique=True)),
                (
                    "smtp_server",
                    models.CharField(
                        help_text="The host:port for sending messages via SMTP for this provider (each server has its own unique login, but all the servers on the same provider using the same hostname for SMTP.)",
                        max_length=200,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Server",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "domain_name",
                    models.CharField(
                        help_text="This is the 'server' within postmark to handle email for the specified domain.",
                        max_length=200,
                        unique=True,
                    ),
                ),
                (
                    "api_key",
                    models.CharField(
                        help_text="In order for the server to be able to post data to the web hooks provided by this service, they need an API key that is unique to this server.",
                        max_length=40,
                    ),
                ),
                (
                    "incoming_spool_dir",
                    models.CharField(
                        blank=True,
                        help_text="The directory incoming messages are temporarily spooled to before being delivered. If not set a reasonable default will be chosen (this is the recommended way).",
                        max_length=1024,
                        null=True,
                    ),
                ),
                (
                    "outgoing_spool_dir",
                    models.CharField(
                        blank=True,
                        help_text="The directory outgoing messages are temporarily spooled to before being sent to the server for delivery. If not set a reasonable default will be chosen (this is the recommended way).",
                        max_length=1024,
                        null=True,
                    ),
                ),
                (
                    "mail_dir_parent",
                    models.CharField(
                        blank=True,
                        help_text="The directory that is the root of all the local mailboxes that mail will be delivered to if being delivered locally. The mailboxes are named by the email address being delivered to.If not set a reasonable default will be chosen (this is the recommended way).",
                        max_length=1024,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "provider",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="as_email.provider",
                    ),
                ),
            ],
            options={
                "ordering": ("domain_name",),
            },
        ),
        migrations.CreateModel(
            name="MessageFilterRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        db_index=True, editable=False, verbose_name="order"
                    ),
                ),
                (
                    "header",
                    models.CharField(
                        choices=[
                            ("addr", "addr"),
                            ("*", "*"),
                            ("bcc", "bcc"),
                            ("cc", "cc"),
                            ("default", "default"),
                            ("from", "from"),
                            ("reply-to", "reply-to"),
                            ("source", "source"),
                            ("subject", "subject"),
                            ("to", "to"),
                        ],
                        default="default",
                        max_length=32,
                    ),
                ),
                ("pattern", models.CharField(blank=True, max_length=256)),
                (
                    "action",
                    models.CharField(
                        choices=[("folder", "folder"), ("destroy", "destroy")],
                        default="folder",
                        max_length=10,
                    ),
                ),
                ("destination", models.CharField(blank=True, max_length=1024)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "email_account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="as_email.emailaccount",
                    ),
                ),
            ],
            options={
                "ordering": ("email_account", "order"),
            },
        ),
        migrations.AddField(
            model_name="emailaccount",
            name="server",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="as_email.server",
            ),
        ),
        migrations.CreateModel(
            name="BlockedMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("message_id", models.IntegerField(unique=True)),
                ("status", models.CharField(max_length=32)),
                ("from_address", models.EmailField(max_length=256)),
                ("subject", models.CharField(blank=True, max_length=1024)),
                ("cc", models.CharField(blank=True, max_length=1024)),
                (
                    "blocked_reason",
                    models.TextField(blank=True, max_length=1024),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "email_account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="as_email.emailaccount",
                    ),
                ),
            ],
            options={
                "ordering": ("email_account", "created_at"),
            },
        ),
        migrations.AddField(
            model_name="alias",
            name="from_email_account",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="as_email.emailaccount",
            ),
        ),
        migrations.AddField(
            model_name="alias",
            name="to_email_account",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="as_email.emailaccount",
            ),
        ),
        migrations.AddIndex(
            model_name="server",
            index=models.Index(
                fields=["domain_name"], name="as_email_se_domain__7128d9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="messagefilterrule",
            index=models.Index(
                fields=["email_account"], name="as_email_me_email_a_202230_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="messagefilterrule",
            index=models.Index(
                fields=["email_account", "order"],
                name="as_email_me_email_a_8a8dcb_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="messagefilterrule",
            unique_together={("email_account", "header", "pattern")},
        ),
        migrations.AddIndex(
            model_name="emailaccount",
            index=models.Index(
                fields=["forward_to"], name="as_email_em_forward_136d4b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="emailaccount",
            index=models.Index(
                fields=["email_address"], name="as_email_em_email_a_7ad406_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="emailaccount",
            index=models.Index(
                fields=["server"], name="as_email_em_server__cd7056_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="emailaccount",
            index=models.Index(
                fields=["owner"], name="as_email_em_owner_i_3e0f16_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blockedmessage",
            index=models.Index(
                fields=["email_account"], name="as_email_bl_email_a_acaf05_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blockedmessage",
            index=models.Index(
                fields=["created_at", "email_account"],
                name="as_email_bl_created_56a090_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="blockedmessage",
            index=models.Index(
                fields=["status", "email_account"],
                name="as_email_bl_status_9eeea7_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="alias",
            constraint=models.UniqueConstraint(
                fields=("from_email_account", "to_email_account"),
                name="as_email_alias_unique_relationships",
            ),
        ),
        migrations.AddConstraint(
            model_name="alias",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("from_email_account", models.F("to_email_account")),
                    _negated=True,
                ),
                name="as_email_alias_prevent_self_alias",
            ),
        ),
    ]
