# Generated by Django 4.2.5 on 2023-09-18 21:32

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        (
            "as_email",
            "0006_emailaccount_spam_assassin_score_threshold_and_more",
        ),
    ]

    operations = [
        migrations.RenameField(
            model_name="emailaccount",
            old_name="blocked_messages_delivery_folder",
            new_name="spam_delivery_folder",
        ),
        migrations.RemoveField(
            model_name="emailaccount",
            name="account_type",
        ),
        migrations.RemoveField(
            model_name="emailaccount",
            name="handle_blocked_messages",
        ),
        migrations.RemoveField(
            model_name="server",
            name="last_blocked_message_run",
        ),
        migrations.AddField(
            model_name="emailaccount",
            name="autofile_spam",
            field=models.BooleanField(
                default=True,
                help_text="When incoming mail exceeds the threshold set in `spam_assassin_score_threshold` then this email will automatically files in the `spam_delivery_folder` mailbox. NOTE: This only apply if local or IMAP delivery is selected in `delivery_method`.",
            ),
        ),
        migrations.AddField(
            model_name="emailaccount",
            name="delivery_method",
            field=models.CharField(
                choices=[
                    ("LD", "Local Delivery"),
                    ("AL", "Alias"),
                    ("FW", "Forwarding"),
                ],
                default="LD",
                help_text="Delivery method indicates how email for this account is delivered. This is either delivery to a local mailbox, delivery to an IMAP mailbox, an alias to another email account on this system or forwarding to an email address by encapsulating the message or rewriting the headers.",
                max_length=2,
            ),
        ),
        migrations.AlterField(
            model_name="emailaccount",
            name="alias_for",
            field=models.ManyToManyField(
                help_text="If the delivery method is `Alias` this is a list of the email accounts that the email will be delivered to instead of this email account. You are declaring that this account is an `alias for` these other accounts. So, say `root@example.com` is an alias for `admin@example.com`, or `thetwoofus@example.com` is an alis for `me@example.com` and `you@example.com`. NOTE: you can only alias to email accounts that are managed by this system. If you want to have email forwarded to a email address not managed by this system you need to choose the delivery method `Forwarding` and properly specify the destination address in the `forward_to` field. NOTE: `alias_for` is only relevant when the delivery method is `Alias`. The field is otherwise ignored.",
                related_name="aliases",
                related_query_name="alias",
                through="as_email.Alias",
                to="as_email.emailaccount",
            ),
        ),
        migrations.AlterField(
            model_name="emailaccount",
            name="forward_to",
            field=models.EmailField(
                blank=True,
                help_text="When the email account delivery method is set to `Forwarding` this is the email address that this email is forwarded to. NOTE: `forward_to` is only relevant when the delivery method is `Forwarding`. The field is otherwise ignored.",
                max_length=254,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="emailaccount",
            name="mail_dir",
            field=models.CharField(
                blank=True,
                help_text="The root folder for the local mail delivery for this email account. This should be left blank and it will be auto-filled in when the email account is created. Only fill it in if you have a specific location in the file system you want this user's local mailbox to be stored at.",
                max_length=1000,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="server",
            name="api_key",
            field=models.CharField(
                help_text="In order for the mail provider to be able to post data to the web hooks provided by this service, they need an API key that is unique to this server.",
                max_length=40,
            ),
        ),
        migrations.DeleteModel(
            name="BlockedMessage",
        ),
    ]
